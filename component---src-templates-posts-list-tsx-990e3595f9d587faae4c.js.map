{"version":3,"file":"component---src-templates-posts-list-tsx-990e3595f9d587faae4c.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/utils/url-builder.ts","webpack://gatsby-starter-blog/./src/utils/to-url-friendly-text.ts","webpack://gatsby-starter-blog/./src/utils/to-emoji.ts","webpack://gatsby-starter-blog/./src/templates/posts-list.tsx","webpack://gatsby-starter-blog/./src/utils/extract-category-from-slug.ts"],"sourcesContent":["import toUrlFriendlyText from \"./to-url-friendly-text\"\n\n/**\n * Builds URLs.\n */\nexport default class UrlBuilder {\n    /**\n     * Builds a URL to an index of posts of the given category.\n     * @param category Category.\n     * @returns URL.\n     */\n    createCategoryUrl(category: string): string {\n        const sanitized = this.removeBoundsSlashes(category)\n\n        return `/${sanitized}`\n    }\n\n    /**\n     * Builds a URL to an index of food reviews of the given food category.\n     * @param foodCategory Food category.\n     * @returns URL.\n     */\n    createFoodCategoryUrl(foodCategory: string): string {\n        const sanitized = this.removeBoundsSlashes(foodCategory)\n\n        return `/tipus-de-menjar/${sanitized}`\n    }\n\n    /**\n     * Builds a URL to an index of food reviews of restaurants located\n     * in the given neighbourhood.\n     * @param neighbourhood Neighbourhood.\n     * @returns URL.\n     */\n    createNeighbourhoodUrl(neighbourhood: string): string {\n        const sanitized = this.removeBoundsSlashes(neighbourhood)\n\n        return `/barri/${toUrlFriendlyText(sanitized)}`\n    }\n\n    private removeBoundsSlashes(chunk: string): string {\n        let output = chunk\n\n        if (output[0] === \"/\") {\n            output = output.slice(1)\n        }\n\n        if (output[output.length - 1] === \"/\") {\n            output = output.slice(0, -1)\n        }\n\n        return output\n    }\n}","export default function toUrlFriendlyText(text: string): string {\n    return text.normalize()\n        .toLowerCase()\n        .replace(/\\s/g, \"-\")\n}","const keywordToEmojiMap = new Map<string, string>([\n  [\"gastro\", \"üç¥\"],\n  [\"llengua\", \"üëÖ\"],\n  [\"llibres\", \"üìñ\"],\n  [\"software\", \"üë®üèª‚Äçüíª\"],\n\n  [\"burger\", \"üçî\"],\n  [\"esmorzar\", \"ü•ñ\"],\n  [\"ramen\", \"üçú\"],\n  [\"dol√ß\", \"üç∞\"],\n  [\"sa\", \"ü•¶\"],\n  [\"pizza\", \"üçï\"],\n  [\"valenci√†\", \"ü•ò\"],\n  [\"brunch\", \"ü•û\"]\n])\n\nexport default function toEmoji(keyword: string): string {\n  return keywordToEmojiMap.get(keyword) ?? keyword;\n}\n","import * as React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { Post } from \"../models/post\"\nimport extractCategoryFromSlug from \"../utils/extract-category-from-slug\"\nimport UrlBuilder from \"../utils/url-builder\"\nimport toEmoji from \"../utils/to-emoji\"\n\nconst urlBuilder = new UrlBuilder\n\nexport type DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: Post[]\n  }\n}\n\ntype ContextProps = {\n  categoryFolder?: string\n  foodCategory?: string\n  neighbourhood?: string\n}\n\nconst PostsList: React.FC<PageProps<DataProps, ContextProps>> = ({ pageContext, data, location }) => {\n  const {\n    site: { siteMetadata },\n    allMarkdownRemark: { nodes: posts }\n  } = data\n\n  const siteTitle = siteMetadata?.title\n\n  if (!siteTitle) {\n    throw new Error(\"A title is mandatory for every post\")\n  }\n\n  const isFiltered = pageContext.categoryFolder\n    || pageContext.foodCategory\n    || pageContext.neighbourhood\n  const publishedPosts = process.env.GATSBY_DEBUG\n    ? posts\n    : posts.filter(post => !post.frontmatter.draft\n      && !post.fields.slug.includes(\"/drafts/\"))\n\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      {\n        isFiltered\n          ? <div id=\"filter-alert\">\n            <p>\n              ‚òùÔ∏è Estas filtrant per\n              {\" \"}\n              <strong>\n                {\n                  pageContext.categoryFolder\n                  && pageContext.categoryFolder.slice(1, -1)\n                  || pageContext.foodCategory\n                  || pageContext.neighbourhood\n                }\n              </strong>\n            </p>\n          </div>\n          : null\n      }\n      <ol style={{ listStyle: `none` }}>\n        {publishedPosts.map(({ frontmatter, fields, excerpt }) => {\n            const { slug } = fields\n            const {\n              title = slug,\n              foodCategory,\n              neighbourhood,\n              date,\n              description\n            } = frontmatter\n            const category = extractCategoryFromSlug(slug)\n\n            return (\n              <li key={slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    {\n                      isFiltered\n                        ? null\n                        : <Link\n                          to={urlBuilder.createCategoryUrl(category)}\n                          className=\"filter category\">\n                          {toEmoji(category)}\n                        </Link>\n                    }\n                    {\n                      pageContext.foodCategory || !foodCategory\n                        ? null\n                        : <Link \n                          to={urlBuilder.createFoodCategoryUrl(foodCategory)}\n                          className=\"filter food-category\"\n                        >\n                          {toEmoji(foodCategory)}\n                        </Link>\n                    }\n                    {\n                      pageContext.neighbourhood || !neighbourhood\n                        ? null\n                        : <Link \n                          to={urlBuilder.createNeighbourhoodUrl(neighbourhood)}\n                          className=\"filter neighbourhood\">\n                          {neighbourhood}\n                        </Link>\n                    }\n                    <h2>\n                      <Link to={slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: description || excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default PostsList\n\nexport const Head = () => <Seo title=\"Tots els articles\" />\n\nexport const pageQuery = graphql`\n  query PostsList(\n    $categoryFolder: String\n    $foodCategory: String\n    $neighbourhood: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { \n        fields: { slug: { regex: $categoryFolder } },\n        frontmatter: { \n          foodCategory: { eq: $foodCategory } \n          neighbourhood: { eq: $neighbourhood } \n        }\n      }, \n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\", locale: \"ca\")\n          title\n          description\n          draft\n          foodCategory\n          neighbourhood\n        }\n      }\n    }\n  }\n`","export default function extractCategoryFromSlug(slug: string): string {\n  return slug.split(\"/\")\n    .filter(Boolean)[0]\n}"],"names":["UrlBuilder","_proto","createCategoryUrl","category","this","removeBoundsSlashes","createFoodCategoryUrl","foodCategory","createNeighbourhoodUrl","neighbourhood","sanitized","normalize","toLowerCase","replace","chunk","output","slice","length","keywordToEmojiMap","Map","toEmoji","keyword","get","urlBuilder","_ref","pageContext","data","location","site","siteMetadata","allMarkdownRemark","nodes","posts","siteTitle","title","Error","isFiltered","categoryFolder","publishedPosts","process","GATSBY_DEBUG","filter","post","frontmatter","draft","fields","slug","includes","React","Layout","Bio","id","style","listStyle","map","_ref2","excerpt","date","description","split","Boolean","extractCategoryFromSlug","key","className","itemScope","itemType","Link","to","itemProp","dangerouslySetInnerHTML","__html","Head","Seo"],"sourceRoot":""}