{"version":3,"file":"component---src-templates-posts-list-tsx-ce7e4bf087a36835e0b9.js","mappings":"2PA+GA,MAtFgEA,IAAqC,IAApC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAU,EAC9F,MACEC,MAAM,aAAEC,GACRC,mBAAqBC,MAAOC,IAC1BN,EAEEO,EAAYJ,aAAY,EAAZA,EAAcK,MAEhC,IAAKD,EACH,MAAM,IAAIE,MAAM,uCAGlB,MAAMC,EAAaX,EAAYY,gBAAkBZ,EAAYa,aAE7D,OACEC,EAAAA,cAACC,EAAAA,EAAM,CAACb,SAAUA,EAAUO,MAAOD,GACjCM,EAAAA,cAACE,EAAAA,EAAG,MAEFL,EACIG,EAAAA,cAAAA,IAAAA,CAAGG,GAAG,gBAAe,wBAEpB,IACDH,EAAAA,cAAAA,IAAAA,CAAGI,UAAU,mBAETlB,EAAYY,gBACTZ,EAAYY,eAAeO,MAAM,GAAI,IACrCnB,EAAYa,eAInB,KAENC,EAAAA,cAAAA,KAAAA,CAAIM,MAAO,CAAEC,UAAW,SACrBd,EAAMe,QAAOC,IAASA,EAAKC,YAAYC,QACrCC,KAAIH,IACH,MAAMd,EAAQc,EAAKC,YAAYf,OAASc,EAAKI,OAAOC,KAC9CC,EAAmCN,EAAKI,OAAOC,KC5DnDE,MAAM,KACfR,OAAOS,SAAS,GD6DT,OACEjB,EAAAA,cAAAA,KAAAA,CAAIkB,IAAKT,EAAKI,OAAOC,MACnBd,EAAAA,cAAAA,UAAAA,CACEI,UAAU,iBACVe,WAAS,EACTC,SAAS,6BAETpB,EAAAA,cAAAA,SAAAA,KAEIH,EACI,KACAG,EAAAA,cAACqB,EAAAA,KAAI,CAACC,GAAIP,EAAUX,UAAU,mBAC7BW,GAIL7B,EAAYa,eAAiBU,EAAKC,YAAYX,aAC1C,KACAC,EAAAA,cAACqB,EAAAA,KAAI,CAACC,GAAE,oBAAsBb,EAAKC,YAAYX,aAC/CK,UAAU,wBAETK,EAAKC,YAAYX,cAGxBC,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACqB,EAAAA,KAAI,CAACC,GAAIb,EAAKI,OAAOC,KAAMS,SAAS,OACnCvB,EAAAA,cAAAA,OAAAA,CAAMuB,SAAS,YAAY5B,KAG/BK,EAAAA,cAAAA,QAAAA,KAAQS,EAAKC,YAAYc,OAE3BxB,EAAAA,cAAAA,UAAAA,KACEA,EAAAA,cAAAA,IAAAA,CACEyB,wBAAyB,CACvBC,OAAQjB,EAAKC,YAAYiB,aAAelB,EAAKmB,SAE/CL,SAAS,kBAIZ,KAIN,EAMN,MAAMM,EAAO,IAAM7B,EAAAA,cAAC8B,EAAAA,EAAG,CAACnC,MAAM,qB","sources":["webpack://gatsby-starter-blog/./src/templates/posts-list.tsx","webpack://gatsby-starter-blog/./src/utils/extract-category-from-slug.ts"],"sourcesContent":["import * as React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { Post } from \"../models/post\"\nimport extractCategoryFromSlug from \"../utils/extract-category-from-slug\"\n\nexport type DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: Post[]\n  }\n}\n\ntype ContextProps = {\n  categoryFolder?: string\n  foodCategory?: string\n}\n\nconst PostsList: React.FC<PageProps<DataProps, ContextProps>> = ({ pageContext, data, location }) => {\n  const {\n    site: { siteMetadata },\n    allMarkdownRemark: { nodes: posts },\n  } = data\n\n  const siteTitle = siteMetadata?.title\n\n  if (!siteTitle) {\n    throw new Error(\"A title is mandatory for every post\")\n  }\n\n  const isFiltered = pageContext.categoryFolder || pageContext.foodCategory \n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      {\n        isFiltered\n          ? <p id=\"filter-alert\">\n            ☝️ Estas filtrant per\n            {\" \"}\n            <i className=\"filter category\">\n              {\n                pageContext.categoryFolder\n                && pageContext.categoryFolder.slice(1, -1)\n                || pageContext.foodCategory\n              }\n            </i>\n          </p>\n          : null\n      }\n      <ol style={{ listStyle: `none` }}>\n        {posts.filter(post => !post.frontmatter.draft)\n          .map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n            const category = extractCategoryFromSlug(post.fields.slug)\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    {\n                      isFiltered\n                        ? null\n                        : <Link to={category} className=\"filter category\">\n                          {category}\n                        </Link>\n                    }\n                    {\n                      pageContext.foodCategory || !post.frontmatter.foodCategory\n                        ? null\n                        : <Link to={`/tipus-de-menjar/${post.frontmatter.foodCategory}`}\n                          className=\"filter food-category\"\n                        >\n                          {post.frontmatter.foodCategory}\n                        </Link>\n                    }\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default PostsList\n\nexport const Head = () => <Seo title=\"Tots els articles\" />\n\nexport const pageQuery = graphql`\n  query PostsList(\n    $categoryFolder: String\n    $foodCategory: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { \n        fields: { slug: { regex: $categoryFolder } },\n        frontmatter: { foodCategory: { eq: $foodCategory } }\n      }, \n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\", locale: \"ca\")\n          title\n          description\n          draft\n          foodCategory\n        }\n      }\n    }\n  }\n`","export default function extractCategoryFromSlug(slug: string): string {\n  return slug.split(\"/\")\n    .filter(Boolean)[0]\n}"],"names":["_ref","pageContext","data","location","site","siteMetadata","allMarkdownRemark","nodes","posts","siteTitle","title","Error","isFiltered","categoryFolder","foodCategory","React","Layout","Bio","id","className","slice","style","listStyle","filter","post","frontmatter","draft","map","fields","slug","category","split","Boolean","key","itemScope","itemType","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","Head","Seo"],"sourceRoot":""}