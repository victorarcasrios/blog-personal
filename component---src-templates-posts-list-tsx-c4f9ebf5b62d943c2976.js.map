{"version":3,"file":"component---src-templates-posts-list-tsx-c4f9ebf5b62d943c2976.js","mappings":"2PA2BA,MA0GMA,EAAoB,IAAIC,IAAoB,CAChD,CAAC,SAAU,MACX,CAAC,WAAY,MACb,CAAC,QAAS,MACV,CAAC,OAAQ,MACT,CAAC,SAAU,MACX,CAAC,UAAW,QAGd,SAASC,EAAQC,GAAyB,MACxC,OAAqC,QAArC,EAAOH,EAAkBI,IAAID,UAAQ,QAAIA,CAC3C,CAEA,MAvHgEE,IAAqC,IAApC,YAAEC,EAAW,KAAEC,EAAI,SAAEC,GAAU,EAC9F,MACEC,MAAM,aAAEC,GACRC,mBAAqBC,MAAOC,IAC1BN,EAEEO,EAAYJ,aAAY,EAAZA,EAAcK,MAEhC,IAAKD,EACH,MAAM,IAAIE,MAAM,uCAGlB,MAAMC,EAAaX,EAAYY,gBAC1BZ,EAAYa,cACZb,EAAYc,cAEjB,OACEC,EAAAA,cAACC,EAAAA,EAAM,CAACd,SAAUA,EAAUO,MAAOD,GACjCO,EAAAA,cAACE,EAAAA,EAAG,MAEFN,EACII,EAAAA,cAAAA,MAAAA,CAAKG,GAAG,gBACRH,EAAAA,cAAAA,IAAAA,KAAG,wBAEA,IACDA,EAAAA,cAAAA,SAAAA,KAEIf,EAAYY,gBACTZ,EAAYY,eAAeO,MAAM,GAAI,IACrCnB,EAAYa,cACZb,EAAYc,iBAKrB,KAENC,EAAAA,cAAAA,KAAAA,CAAIK,MAAO,CAAEC,UAAW,SACrBd,EAAMe,QAAOC,IAASA,EAAKC,YAAYC,QACrCC,KAAIC,IAAsC,IAArC,YAAEH,EAAW,OAAEI,EAAM,QAAEC,GAAS,EACpC,MAAM,KAAEC,GAASF,GACX,MACJnB,EAAQqB,EAAI,aACZjB,EAAY,cACZC,EAAa,KACbiB,EAAI,YACJC,GACER,EACES,EC3EH,SAAiCH,GAC9C,OAAOA,EAAKI,MAAM,KACfZ,OAAOa,SAAS,EACrB,CDwE6BC,CAAwBN,GAEzC,OACEf,EAAAA,cAAAA,KAAAA,CAAIsB,IAAKP,GACPf,EAAAA,cAAAA,UAAAA,CACEuB,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAETzB,EAAAA,cAAAA,SAAAA,KAEIJ,EACI,KACAI,EAAAA,cAAC0B,EAAAA,KAAI,CAACC,GAAIT,EAAUK,UAAU,mBAC7B1C,EAAQqC,IAIbjC,EAAYa,eAAiBA,EACzB,KACAE,EAAAA,cAAC0B,EAAAA,KAAI,CAACC,GAAE,oBAAsB7B,EAC9ByB,UAAU,wBAET1C,EAAQiB,IAIbb,EAAYc,gBAAkBA,EAC1B,KACAC,EAAAA,cAAC0B,EAAAA,KAAI,CAACC,GAAE,WExGQC,EFwGsB7B,EEvGrD6B,EAAKC,YACPC,cACAC,QAAQ,MAAO,MFsGER,UAAU,wBACTxB,GAGPC,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAAC0B,EAAAA,KAAI,CAACC,GAAIZ,EAAMiB,SAAS,OACvBhC,EAAAA,cAAAA,OAAAA,CAAMgC,SAAS,YAAYtC,KAG/BM,EAAAA,cAAAA,QAAAA,KAAQgB,IAEVhB,EAAAA,cAAAA,UAAAA,KACEA,EAAAA,cAAAA,IAAAA,CACEiC,wBAAyB,CACvBC,OAAQjB,GAAeH,GAEzBkB,SAAS,mBEzHhB,IAA2BJ,CF6HvB,KAIN,EAmBN,MAAMO,EAAO,IAAMnC,EAAAA,cAACoC,EAAAA,EAAG,CAAC1C,MAAM,qB","sources":["webpack://gatsby-starter-blog/./src/templates/posts-list.tsx","webpack://gatsby-starter-blog/./src/utils/extract-category-from-slug.ts","webpack://gatsby-starter-blog/./src/utils/to-url-friendly-text.ts"],"sourcesContent":["import * as React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { Post } from \"../models/post\"\nimport extractCategoryFromSlug from \"../utils/extract-category-from-slug\"\nimport toUrlFriendlyText from \"../utils/to-url-friendly-text\"\n\nexport type DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: Post[]\n  }\n}\n\ntype ContextProps = {\n  categoryFolder?: string\n  foodCategory?: string\n  neighbourhood?: string\n}\n\nconst PostsList: React.FC<PageProps<DataProps, ContextProps>> = ({ pageContext, data, location }) => {\n  const {\n    site: { siteMetadata },\n    allMarkdownRemark: { nodes: posts }\n  } = data\n\n  const siteTitle = siteMetadata?.title\n\n  if (!siteTitle) {\n    throw new Error(\"A title is mandatory for every post\")\n  }\n\n  const isFiltered = pageContext.categoryFolder\n    || pageContext.foodCategory\n    || pageContext.neighbourhood\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      {\n        isFiltered\n          ? <div id=\"filter-alert\">\n            <p>\n              ‚òùÔ∏è Estas filtrant per\n              {\" \"}\n              <strong>\n                {\n                  pageContext.categoryFolder\n                  && pageContext.categoryFolder.slice(1, -1)\n                  || pageContext.foodCategory\n                  || pageContext.neighbourhood\n                }\n              </strong>\n            </p>\n          </div>\n          : null\n      }\n      <ol style={{ listStyle: `none` }}>\n        {posts.filter(post => !post.frontmatter.draft)\n          .map(({ frontmatter, fields, excerpt }) => {\n            const { slug } = fields\n            const {\n              title = slug,\n              foodCategory,\n              neighbourhood,\n              date,\n              description\n            } = frontmatter\n            const category = extractCategoryFromSlug(slug)\n\n            return (\n              <li key={slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    {\n                      isFiltered\n                        ? null\n                        : <Link to={category} className=\"filter category\">\n                          {toEmoji(category)}\n                        </Link>\n                    }\n                    {\n                      pageContext.foodCategory || !foodCategory\n                        ? null\n                        : <Link to={`/tipus-de-menjar/${foodCategory}`}\n                          className=\"filter food-category\"\n                        >\n                          {toEmoji(foodCategory)}\n                        </Link>\n                    }\n                    {\n                      pageContext.neighbourhood || !neighbourhood\n                        ? null\n                        : <Link to={`/barri/${toUrlFriendlyText(neighbourhood)}`}\n                          className=\"filter neighbourhood\">\n                          {neighbourhood}\n                        </Link>\n                    }\n                    <h2>\n                      <Link to={slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: description || excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n      </ol>\n    </Layout>\n  )\n}\n\nconst keywordToEmojiMap = new Map<string, string>([\n  [\"burger\", \"üçî\"],\n  [\"esmorzar\", \"ü•ñ\"],\n  [\"ramen\", \"üçú\"],\n  [\"dol√ß\", \"üç∞\"],\n  [\"gastro\", \"üç¥\"],\n  [\"llibres\", \"üìñ\"]\n])\n\nfunction toEmoji(keyword: string): string {\n  return keywordToEmojiMap.get(keyword) ?? keyword;\n}\n\nexport default PostsList\n\nexport const Head = () => <Seo title=\"Tots els articles\" />\n\nexport const pageQuery = graphql`\n  query PostsList(\n    $categoryFolder: String\n    $foodCategory: String\n    $neighbourhood: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { \n        fields: { slug: { regex: $categoryFolder } },\n        frontmatter: { \n          foodCategory: { eq: $foodCategory } \n          neighbourhood: { eq: $neighbourhood } \n        }\n      }, \n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\", locale: \"ca\")\n          title\n          description\n          draft\n          foodCategory\n          neighbourhood\n        }\n      }\n    }\n  }\n`","export default function extractCategoryFromSlug(slug: string): string {\n  return slug.split(\"/\")\n    .filter(Boolean)[0]\n}","export default function toUrlFriendlyText(text: string): string {\n    return text.normalize()\n        .toLowerCase()\n        .replace(/\\s/g, \"-\")\n}"],"names":["keywordToEmojiMap","Map","toEmoji","keyword","get","_ref","pageContext","data","location","site","siteMetadata","allMarkdownRemark","nodes","posts","siteTitle","title","Error","isFiltered","categoryFolder","foodCategory","neighbourhood","React","Layout","Bio","id","slice","style","listStyle","filter","post","frontmatter","draft","map","_ref2","fields","excerpt","slug","date","description","category","split","Boolean","extractCategoryFromSlug","key","className","itemScope","itemType","Link","to","text","normalize","toLowerCase","replace","itemProp","dangerouslySetInnerHTML","__html","Head","Seo"],"sourceRoot":""}