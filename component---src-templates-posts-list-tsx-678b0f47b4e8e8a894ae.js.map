{"version":3,"file":"component---src-templates-posts-list-tsx-678b0f47b4e8e8a894ae.js","mappings":"2PAgFA,MA5DkDA,IAAwB,IAAvB,KAAEC,EAAI,SAAEC,GAAU,EACnE,MACEC,MAAM,aAAEC,GACRC,mBAAqBC,MAAOC,IAC1BN,EAEEO,EAAYJ,aAAY,EAAZA,EAAcK,MAEhC,IAAKD,EACH,MAAM,IAAIE,MAAM,uCAGlB,OACEC,EAAAA,cAACC,EAAAA,EAAM,CAACV,SAAUA,EAAUO,MAAOD,GACjCG,EAAAA,cAACE,EAAAA,EAAG,MACJF,EAAAA,cAAAA,KAAAA,CAAIG,MAAO,CAAEC,UAAW,SACrBR,EAAMS,QAAOC,IAASA,EAAKC,YAAYC,QACrCC,KAAIH,IACH,MAAMR,EAAQQ,EAAKC,YAAYT,OAASQ,EAAKI,OAAOC,KAC9CC,EAAmCN,EAAKI,OAAOC,KCtCnDE,MAAM,KACfR,OAAOS,SAAS,GDuCT,OACEd,EAAAA,cAAAA,KAAAA,CAAIe,IAAKT,EAAKI,OAAOC,MACnBX,EAAAA,cAAAA,UAAAA,CACEgB,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAETlB,EAAAA,cAAAA,SAAAA,KAEIY,GAgCtB,SAA2BA,GAKzB,OAJgCO,OAAO5B,SAAS6B,SAASP,MAAM,KAC5DR,OAAOS,SACPO,UAAU,KAEsBT,CACrC,CAtCkCU,CAAkBV,GAC1BZ,EAAAA,cAACuB,EAAAA,KAAI,CAACC,GAAIZ,EAAUI,UAAU,mBAC7BJ,GAED,KAENZ,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACuB,EAAAA,KAAI,CAACC,GAAIlB,EAAKI,OAAOC,KAAMc,SAAS,OACnCzB,EAAAA,cAAAA,OAAAA,CAAMyB,SAAS,YAAY3B,KAG/BE,EAAAA,cAAAA,QAAAA,KAAQM,EAAKC,YAAYmB,OAE3B1B,EAAAA,cAAAA,UAAAA,KACEA,EAAAA,cAAAA,IAAAA,CACE2B,wBAAyB,CACvBC,OAAQtB,EAAKC,YAAYsB,aAAevB,EAAKwB,SAE/CL,SAAS,kBAIZ,KAIN,EAcN,MAAMM,EAAO,IAAM/B,EAAAA,cAACgC,EAAAA,EAAG,CAAClC,MAAM,qB","sources":["webpack://gatsby-starter-blog/./src/templates/posts-list.tsx","webpack://gatsby-starter-blog/./src/utils/extract-category-from-slug.ts"],"sourcesContent":["import * as React from \"react\"\nimport { graphql, Link, PageProps } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Seo from \"../components/seo\"\nimport Layout from \"../components/layout\"\nimport { Post } from \"../models/post\"\nimport extractCategoryFromSlug from \"../utils/extract-category-from-slug\"\n\nexport type DataProps = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    nodes: Post[]\n  }\n}\n\nconst PostsList: React.FC<PageProps<DataProps>> = ({ data, location }) => {\n  const {\n    site: { siteMetadata },\n    allMarkdownRemark: { nodes: posts },\n  } = data\n\n  const siteTitle = siteMetadata?.title\n\n  if (!siteTitle) {\n    throw new Error(\"A title is mandatory for every post\")\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <ol style={{ listStyle: `none` }}>\n        {posts.filter(post => !post.frontmatter.draft)\n          .map(post => {\n            const title = post.frontmatter.title || post.fields.slug\n            const category = extractCategoryFromSlug(post.fields.slug)\n\n            return (\n              <li key={post.fields.slug}>\n                <article\n                  className=\"post-list-item\"\n                  itemScope\n                  itemType=\"http://schema.org/Article\"\n                >\n                  <header>\n                    {\n                      category && isInCategoryIndex(category)\n                        ? <Link to={category} className=\"filter category\">\n                          {category}\n                        </Link>\n                        : null\n                    }\n                    <h2>\n                      <Link to={post.fields.slug} itemProp=\"url\">\n                        <span itemProp=\"headline\">{title}</span>\n                      </Link>\n                    </h2>\n                    <small>{post.frontmatter.date}</small>\n                  </header>\n                  <section>\n                    <p\n                      dangerouslySetInnerHTML={{\n                        __html: post.frontmatter.description || post.excerpt,\n                      }}\n                      itemProp=\"description\"\n                    />\n                  </section>\n                </article>\n              </li>\n            )\n          })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default PostsList\n\nfunction isInCategoryIndex(category: string): boolean {\n  const locationPathLastSegment = window.location.pathname.split(\"/\")\n    .filter(Boolean)\n    .reverse()[0] \n    \n  return locationPathLastSegment !== category\n}\n\nexport const Head = () => <Seo title=\"Tots els articles\" />\n\nexport const pageQuery = graphql`\n  query PostsList(\n    $categoryFolder: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { fields: { slug: { regex: $categoryFolder } } }, \n      sort: { frontmatter: { date: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"DD MMMM YYYY\", locale: \"ca\")\n          title\n          description\n          draft\n        }\n      }\n    }\n  }\n`","export default function extractCategoryFromSlug(slug: string): string {\n  return slug.split(\"/\")\n    .filter(Boolean)[0]\n}"],"names":["_ref","data","location","site","siteMetadata","allMarkdownRemark","nodes","posts","siteTitle","title","Error","React","Layout","Bio","style","listStyle","filter","post","frontmatter","draft","map","fields","slug","category","split","Boolean","key","className","itemScope","itemType","window","pathname","reverse","isInCategoryIndex","Link","to","itemProp","date","dangerouslySetInnerHTML","__html","description","excerpt","Head","Seo"],"sourceRoot":""}